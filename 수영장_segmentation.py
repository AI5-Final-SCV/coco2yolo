# -*- coding: utf-8 -*-
"""수영장 segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O4jNEQEX_Xkht7IpV8a_pyS6BooshrKX
"""

import json
import cv2
import os
import matplotlib.pyplot as plt
import shutil
import pandas as pd
from pathlib import Path
import json
import numpy as np
!pip install imantics
from imantics import Polygons, Mask
import sys

# Commented out IPython magic to ensure Python compatibility.
# coco format 폴더 생성
!mkdir /content/coco_datasets

# yolov8 format 폴더 생성
!mkdir /content/yolo_datasets
!mkdir /content/yolo_datasets/train
!mkdir /content/yolo_datasets/test
!mkdir /content/yolo_datasets/valid
!mkdir /content/yolo_datasets/train/images
!mkdir /content/yolo_datasets/test/images
!mkdir /content/yolo_datasets/valid/images
!mkdir /content/yolo_datasets/train/labels
!mkdir /content/yolo_datasets/test/labels
!mkdir /content/yolo_datasets/valid/labels

# 이미지 리사이즈 후 저장 경로 생성
!mkdir /content/resize
!mkdir /content/resize/train
!mkdir /content/resize/test
!mkdir /content/resize/valid
!mkdir /content/resize/train/images
!mkdir /content/resize/test/images
!mkdir /content/resize/valid/images
!mkdir /content/resize/train/labels
!mkdir /content/resize/test/labels
!mkdir /content/resize/valid/labels

# %cd /content/coco_datasets

# roboflow coco 데이터셋 다운
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="6eDocmXAYSWvvwPb1wlj")
project = rf.workspace("ani-n-nplf2").project("swimming_pool-m0emv")
dataset = project.version(21).download("coco")

# 지정받은 경로의  annotation_json파일을 읽는 함수
def load_json(path):
  with open(f'/content/coco_datasets/Swimming_Pool-21/{path}/_annotations.coco.json', 'r') as f:
    json_data = json.load(f)
    return json_data

def load_images_from_folder(folder):
  count = 0
  # 폴더안에 있는 이미지 파일들을 리스트로 하나씩 꺼냄 ,# annotation json 파일 거르기
  for filename in os.listdir(folder):
    # annotation json 파일 거르기
    if '.jpg' in filename:
        # source 변수에 folder와 filename을 결합하여 경로 생성
        source = os.path.join(folder,filename)
        # output_path로 destination 변수에 이미지 저장 경로 생성
        destination = f"{copy_output_path}images/img{count}.jpg"

        try:
            # 이미지를 복사해서 옮긴다.
            shutil.copy(source, destination)

        # If source and destination are same
        except shutil.SameFileError:
            print("Source and destination represents the same file.")

        # 모든 이미지 파일 이름 리스트에 저장
        file_names.append(filename)
        count += 1

  print("File copied successfully.")

# 이미지 annotation 얻기
def get_img_ann(image_id,path):
  with open(f'/content/coco_datasets/Swimming_Pool-21/{path}/_annotations.coco.json', 'r') as f:
    json_data = json.load(f)
  # 각 이미지 annotation을 저장하기 위한 빈 리스트
  img_ann = []
  isFound = False
  # 각 annotation에 대해
  for ann in json_data['annotations']:
      # 만약 img_id 서로 같을시
    if ann['image_id'] == img_id:
      # 빈 리스트에 annotation을 저장
      img_ann.append(ann)
      isFound = True
  if isFound:
      return img_ann
  else:
      return None

def get_img(filename,path):
  # test, train, valid를 각각 이미지복사 실행
  with open(f'/content/coco_datasets/Swimming_Pool-21/{path}/_annotations.coco.json', 'r') as f:
    json_data = json.load(f)
  for img in json_data['images']:
    if img['file_name'] == filename:
      return img

# 이미지 사이즈 변경하기
def img_resize(input_path, output_path):
  for file in os.listdir(input_path):
      if os.path.isfile(input_path+file):  #파일인지 아닌지 체크
          img = cv2.imread(input_path+file) # 이미지 읽기
          img_resized = cv2.resize(img, (640, 640)) #size 지정
          cv2.imwrite(output_path+file, img_resized)

Null = None
# 이미지 리사이즈
for i in ['test', 'train', 'valid']:
  file_names = []
  copy_output_path = f'/content/yolo_datasets/{i}/'
  load_images_from_folder(f'/content/coco_datasets/Swimming_Pool-21/{i}/')
  input_path = f'/content/yolo_datasets/{i}/images/'
  output_path = f'/content/resize/{i}/'
  detection_path = f'/content/yolo_datasets/{i}/labels'
  # 이미지 리사이즈
  img_resize(input_path, (output_path+'images/'))
  # 이미지 파일 이름들 리스트에서 하나씩 꺼내기
  count=0
  for filename in file_names:
    polygon_list = []
    # 이미지의 정보 얻기
    img = get_img(filename,i)
    # 이미지 id 저장
    img_id = img['id']
    # 이미지 width 저장
    img_width = img['width']
    # 이미지 height 저장
    img_height = img['height']

    # 이미지 annotation 얻기
    img_ann = get_img_ann(img_id, i)
    if img_ann:
      # annotation(label)들을 저장
      file_object = open(f"{output_path}labels/img{count}.txt", "a")

      for ann in img_ann:
        # category_id 저장
        current_category = ann['category_id'] - 1 # As yolo format labels start from 0
        ##################### coco bbox를 yolo bbox로 변환할때의 작업 ##########################
        # coco annotation에 저장된 bbox 값 저장
        xmin, ymin, width, height = ann['bbox']

        # yolov8에 사용되는 중간값 계산
        xmax = xmin + width
        ymax = ymin + height
        #xcen = (xmin + xmax) / 2
        #ycen = (ymin + ymax) / 2
        x_centre = (xmin + xmax) / 2 / img_width
        y_centre = (ymin + ymax) / 2 / img_height
        w = (xmax - xmin) / img_width
        h = (ymax - ymin) / img_height

        # 소수점 자리 지정
        w = format(w, '.6f')
        h = format(h, '.6f')
        x_centre = format(x_centre, '.6f')
        y_centre = format(y_centre, '.6f')
        #####################################################################################

        # annotatio에 있는 segmentation만을 추출하여 리스트로 저장
        segmentation_points_list = []
        for segmentation in ann['segmentation']:
            segmentation_points = [str(format(point / img_width, '.6f')) for point in segmentation]
            segmentation_points_list.append(' '.join(segmentation_points))
        segmentation_points_string = ' '.join(segmentation_points_list)


        # annotation txt파일에 쓰기
        file_object.write(f"{current_category}  {segmentation_points_string}\n") # {x_centre} {y_centre} {w} {h} bbox변환일시 current_category앞에 추가
      file_object.close() # 파일 쓰고 닫기
      count += 1  # This should be outside the if img_ann block.

!pip install ultralytics==8.0.117

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

# Commented out IPython magic to ensure Python compatibility.
# yolo학습 yaml파일 만들기
# %cd /content/
import yaml

data = { 'train' : '/content/resize/train/images', # train 이미지가 있는 경로
         'val' : '/content/resize/valid/images', # validation 이미지가 있는 경로
         'test' : '/content/resize/test/images', # test 이미지가 있는 경로
        'names' : ['- Swiming-Pool'],
        'nc': 1}

with open('/content/resize/Data.yaml', 'w') as f:
  yaml.dump(data, f)

with open('/content/resize/Data.yaml', 'r') as f:
  smart_inside_yaml = yaml.safe_load(f)
  display(smart_inside_yaml)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/

!yolo task=segment model=predict model=yolov8n-seg.pt data=/content/resize/Data.yaml epochs=50 imgsz=640 batch=8

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
Image(filename=f'/content/runs/segment/train/results.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
Image(filename=f'/content/runs/segment/train/val_batch0_pred.jpg', width=600)

